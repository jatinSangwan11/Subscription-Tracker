*********** NOTES ****************

mongodb pass- jatinsangwan


in mongodb we have the db--> collection which is lowercase and plural(users) -> documents which are individual entries in the db 
and we export User = mongoose.mode(name of the model, schema);  we use this User on our server 

From the above we will be able to do: User.findOne(....)

###### foreign key type concept in MongoDb #############

user: {
  type: mongoose.Schema.Types.ObjectId,
  ref: 'User',
  required: true
}
 in the above schema -- this concept is similar to the foreign key , but here we store the **** _id  ***** ,which is of the User model 
 --> which depicts that the this field will store the _id of another document of the model 'User'

 {
  name: "Netflix",
  user: ObjectId("661ae8f...") // Points to a User document
}


####### MiddleWare #######

| Feature         | Mongoose Middleware                            | Express Middleware                                |
| --------------- | ---------------------------------------------- | ------------------------------------------------- |
| Used for        | DB document lifecycle                          | HTTP request/response lifecycle                   |
| Example methods | `pre('save')`, `post('find')`, `pre('delete')` | `app.use()`, `app.get()`, `req, res, next`        |
| Scope           | Works inside Mongoose models                   | Works globally on routes/APIs                     |
| Accesses        | Mongoose docs (`this`)                         | HTTP req/res objects                              |
| Common uses     | Hash password, validate, transform data        | Auth check, body parsing, logging, error handling |



###### Date Object modification #####

this.renewalDate.setDate(
  this.renewalDate.getDate() + renewalPeriod[this.frequency]
);

this.renewalDate.getDate() returns the day of the month (e.g., 5 for June 5).

+ renewalPeriod[this.frequency] adds the number of days (e.g., +30 if monthly).

setDate(...) updates the date accordingly. It handles month/year rollover automatically.


#### scalability ######

-> always have a custom error handler as it saves us hours of debugging



#### mongoose transcation #####

A Mongoose transaction is a way to safely perform multiple MongoDB operations as a single unit, so that either all of them succeed or none of them do.
This ensures data consistency â€” especially important in financial systems, game states, or anything involving multiple updates at once.

Example: 
              const session = await mongoose.startSession();
              try {
                session.startTransaction();

                await User.updateOne({ _id: userId }, { $inc: { chips: -100 } }, { session });
                await GameLog.create([{ userId, gameId, result: 'lost' }], { session });
                await User.updateOne({ _id: winnerId }, { $inc: { chips: 100 } }, { session });

                await session.commitTransaction();
              } catch (err) {
                await session.abortTransaction();
                console.error("Transaction failed:", err);
              } finally {
                session.endSession();
              }

start a session --> make the multiple operations as the part of the same session --> if success then commit the transcation --> else abort -> end session